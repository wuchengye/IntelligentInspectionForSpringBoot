<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
<!-- 	 该配置影响的所有映射器中配置的缓存的全局开关。默认值true -->
		<setting name="cacheEnabled" value="true" />
<!-- 		延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。 默认值false-->
		<setting name="lazyLoadingEnabled" value="false" />
<!-- 		是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true-->
		<setting name="multipleResultSetsEnabled" value="true" />
<!-- 		使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 默认值true-->
		<setting name="useColumnLabel" value="true" />
<!-- 		允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）默认值 false-->
		<setting name="useGeneratedKeys" value="false" />
<!-- 		指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 默认值PARTIAL-->
		<setting name="autoMappingBehavior" value="PARTIAL" />
<!-- 		配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认值SIMPLE -->
		<setting name="defaultExecutorType" value="SIMPLE" />
<!-- 		允许在嵌套语句中使用分页（RowBounds）。 If allow, set the false. 默认值 false-->
		<setting name="safeRowBoundsEnabled" value="false" />
<!-- 		是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认值 false -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
<!-- 		MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 默认值SESSION-->
		<setting name="localCacheScope" value="SESSION" />
<!-- 		当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。默认值 OTHER -->
		<setting name="jdbcTypeForNull" value="VARCHAR" />
<!-- 		指定哪个对象的方法触发一次延迟加载。默认值 equals,clone,hashCode,toString -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 返回map类型时，如果查询到的记录某个字段为空，则设置对应value为空，而不是省略 -->
		<setting name="callSettersOnNulls" value="true"/>
	</settings>


	<!--新增-->
	<plugins>
		<plugin interceptor="com.github.pagehelper.PageHelper">
			<!-- 4.0.0以后版本可以不设置该参数 -->
			<property name="dialect" value="mysql"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			<!-- 和startPage中的pageNum效果一样-->
			<property name="offsetAsPageNum" value="true"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
			<property name="rowBoundsWithCount" value="true"/>
			<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
			<property name="pageSizeZero" value="true"/>
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
			<property name="reasonable" value="false"/>
			<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
			<!-- 不理解该含义的前提下，不要随便复制该配置 -->
			<property name="params" value="pageNum=pageHelperStart;pageSize=pageHelperRows;"/>
			<!-- 支持通过Mapper接口参数来传递分页参数 -->
			<property name="supportMethodsArguments" value="false"/>
			<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			<property name="returnPageInfo" value="none"/>
		</plugin>
	</plugins>
    
	
</configuration>